/**
 * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 7/Nov/17 Carlos Brito *
 * * * * * * * * * * * * * * * * * * * *
 * 
 * @file
 */
#ifndef SERVER_RESOURCE_DEVICE_HPP
#define SERVER_RESOURCE_DEVICE_HPP

#include <string>
#include <memory>
#include <mysql_devapi.h>
#include <json.hpp>
#include <restbed>
#include <functional>
#include <boost/optional.hpp>

#include "../DeviceModel/DeviceModel.hpp"
#include "srv/db/db.hpp"

namespace celeste
{   
namespace resource
{
    /**
     * @brief      Represents a Device on the DB.
     */
    struct Device
    {
        typedef int id_type;

        Device() = default;

        std::string             DeviceId;
        std::string             man;
        std::string             mod;
        std::string             sn;
    };

    template <class Json>
    class Devices : public restbed::Resource
    {
    };

    /**
     * @brief      Devices resource class.
     *
     * @tparam     Json  Json type to use
     */
    template <>
    class Devices<nlohmann::json> : public restbed::Resource
    {
    public:
        // --- Typedefs --------------
        typedef Device              value_type;
        typedef nlohmann::json      json_type;

        // --- Constructors ----------

        /**
         * @brief      Creates a resource where you can access the Devices
         * on the DB.
         *
         * @param[in]  dbSettings  DB settings for connection.
         */
        Devices(const celeste::SessionSettings& dbSettings);

        // --- Public methods --------

        /**
         * @brief      Gets a Device from the DB.
         *
         * @param[in]  deviceId  The device identifier.
         *
         * @return     Fetched Device.
         */
        Device get(const std::string& deviceId);

        /**
         * @brief      Inserts a Device into the DB.
         *
         * @param[in]  device   Device to be inserted.
         * @param[in]  autogen  Autogen flag if we want to automatically
         * generate a key for the device.
         *
         * @return     Autogenerated key.
         */
        void insert(const value_type& device);
        void insert(const value_type& device, std::vector<std::string>models);

        /**
         * @brief      Removes a model from the DB.
         *
         * @param[in]  deviceId  The device identifier
         */
        void remove(const std::string& deviceId);

    private:
        // --- Private methods -------
        void GET(const std::shared_ptr<restbed::Session> session);
        void POST(const std::shared_ptr<restbed::Session> session);
        void DELETE(const std::shared_ptr<restbed::Session> session);

        // --- Member attributes -----
        DeviceModelAssocs<json_type>    modelAssociator;

        celeste::SessionSettings        dbSettings;

        mysqlx::Session                 dbSession;
        mysqlx::Schema                  celesteDB;
        mysqlx::Table                   deviceTable;

        std::mutex                      sqlMutex;
    };
}
}

// --- JSON SERIALIZATION ------------
namespace nlohmann
{
    template <>
    struct adl_serializer<celeste::resource::Device>
    {
        static void to_json(json& j, const celeste::resource::Device& device);
        static void from_json(const json& j, celeste::resource::Device& device);
    }; 
}

// --- SQL SERIALIZATION -------------
namespace mysqlx
{
    template <>
    struct row_serializer<celeste::resource::Device>
    {
        static void to_row (SerializableRow& row, const celeste::resource::Device& device);
        static void from_row (const SerializableRow& row, celeste::resource::Device& device);
    };
}

#endif