/**
 * \mainpage Solar Plant Monitoring System
 * \tableofcontents
 * \section Description
 * This project consists in the monitoring of "samples" sent by
 * some `Logger` device that measures various different types of
 * these samples. In the SunSpec Data Exchange (SDX) terminology, these
 * samples are called `Points`. In general terms, the `Logger` sends
 * measurements encoded in XML to the server, where the server is allowed
 * to do anything that it wants with the data; such as inserting it into
 * a database.
 *
 * \section Points
 * Points are measurements taken by `Models`. These points can be things
 * such as:
 * - Amperage
 * - Wattage
 * - Latitude
 * - Longitude
 * - Altitude
 * - Temperature
 * The exact interpretation and encoding of these points is to be defined in
 * the folder `models`.
 *
 * Various points can be taken by one model. This means that for every model `M`, there
 * are `N` points `P` that are sampled by it. In a diagram:
 * ````
 *   is sampled by
 * P @-------------\
 * P @--------------\
 * .                 \
 * .                 [M]
 * .                 /
 * P @--------------/
 * P @-------------/
 * ````
 * \section Models
 * Models are objects such as meters, temperatures sensors, GPS, etc. They are
 * the ones in charge of sampling the `Points`. Please refer to the `Points` section
 * to understand what a point is. It is clear that a GPS cannot measure things such
 * as Amperage or Temperature, but it can measure Latitude, Longitude and Altitude.
 * This is important to note as it is necessary to define exactly what the models
 * can measure. These models are "contained" or "read by" `Devices`. Many models can
 * be read by one device. That is, a device `D` can read `N` models `M` at once. In
 * a diagram this looks like:
 *
 * ````
 *     is read by
 * M @-------------\
 * M @--------------\
 * .                 \
 * .                 [D]
 * .                 /
 * M @--------------/
 * M @-------------/
 * ````
 * The models "contain" many points.
 *
 * \section Devices
 * Devices are to be thought of as "black boxes" that somehow sample measurements
 * using the `Models`. Their sole function is to sample the measurements and make
 * sure those samples reach the server. Think of devices as black boxes that contain
 * `N` models, therefore encapsulating the electronics behind it and their output is
 * an XML document. In a diagram this might look like:
 *
 * ````
 *    Device
 * @-----------@
 * | M . . . M |            @ o o o o o @
 * | . .     . |    XML     8           8
 * | .   .   . | ---------> 8  Server   8
 * | .     . . |  Internet  8           8
 * | M . . . M |            8 o o o o o @
 * @-----------@
 * ````
 *
 * We note that we only think these "`Devices`" as black boxes containing models. However,
 * it might not (and it will be most likely) that this is not the case physically; the
 * `Models` could be scattered around and there are cables connected to the `Device`.
 *
 * \section Server
 * The server is thought to be as a collection of `N` different services.
 *
 * ````
 *     __________
 *    |  Server  |
 *    ------------
 *         @
 *         |
 *         | looks internally like
 *         |
 *         V
 * @ o o o o o o o @
 * 8               8
 * 8   Service 1   8
 * 8       .       8
 * 8       .       8
 * 8       .       8
 * 8   Service N   8
 * 8               8
 * @ o o o o o o o @
 * ````
 * These services will have the ability to gather data from the Solar Plant Module (SPM), instruct the
 * SPM to shut the power off, diagnose a faulty SPM, etc. Each service may have `N` resources which are
 * published to their respective paths. For example, if a `Logger` wanted to upload voltage readings or the like
 * to the server, then there should be a resource called `logger_upload`. This resource might be located, for
 * example, in the path `/solarplant/resources/logger_upload`. There many `Loggers` should be able to access it.
 * It is clear that a transport protocol is necessary. For this, the server and the devices should utilize
 * HTTP.
 *
 * \section Services
 * It already has been said that a `Service` may publish `N` resources. In a diagram this looks like:
 * ````
 *   is published by
 * R @---------------\
 * R @----------------\
 * .                   \
 * .                   [Service]
 * .                   /
 * R @----------------/
 * R @---------------/
 * ````
 * It is important to note that for a service to publish a resource, the resource needs to have a unique
 * path assigned to it.
 *
 * \section Resources
 * Each of the resources has one associated handler which implies
 * that `N`  resource **instances** `Ri` have only one handler `H`. In a diagram:
 *
 * ````
 *     is handled by
 * Ri @--------------\
 * Ri @---------------\
 * .                   \
 * .                  [H]
 * .                   /
 * Ri @---------------/
 * Ri @--------------/
 * ````
 * Also each resource instance should have on unique associated path `P`.
 *
 * ````
 *     is located at
 * Ri @-------------- [P]
 * ````
 *
 * Each resource `R` has one unique associated handler.
 * ````
 *    is handled uniquely by
 * R @----------------------- [H]
 * ````
 * A `Resource` is a class with different attributes. In general, we differentiate resources from one another
 * through use of their names, their handlers and attributes.
 *
 * For example, the `make_logger_upload()` method returns a `logger_upload` resource. This resource has a unique
 * associated handler `logger_upload_handler`. The resource (like all resources) can have many instances at different
 * paths and be published by any service (as long as the path doesn't collision with any resources already on the
 * service).
 *
 * To verify what constitutes a particular resource we recommend that one looks at the `.hpp` file documentation.
 *
 * \subsection Implementation
 * We follow these steps to create a resource:
 *
 * 1. Give the resource a name. E.g. `my_resource`
 * 2. Create `.hpp` and `.cpp` files in the directory `resource`
 * 3. Declare a function `make_my_resource` under the namespace `solarplant::srv:resource` in `my_resource.hpp` file
 * 4. In the `.cpp` file implement the handler and internals under the namespace `solarplant::srv::handler`
 * 5. Implement the handler and make methods
 * 6. Publish the resource in some service.
 *
 * Important notes:
 * - The handler should be `void` and take a `std::shared_ptr<restbed::Session>` as parameter.
 * - The make function should return a `std::shared_ptr<restbed::Resource>` and take a `std::string`
 * as a parameter for setting the path
 * - Check the resources already implemented to get an idea.
 */
